# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import osinfo_pb2 as osinfo__pb2


class OSInfoProviderStub(object):
    """Interface of the service (implemented by server)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOSInfo = channel.unary_unary(
                '/osinfo.OSInfoProvider/GetOSInfo',
                request_serializer=osinfo__pb2.OSQuery.SerializeToString,
                response_deserializer=osinfo__pb2.OSInfo.FromString,
                )
        self.ListProcessInfo = channel.stream_stream(
                '/osinfo.OSInfoProvider/ListProcessInfo',
                request_serializer=osinfo__pb2.ProcessQuery.SerializeToString,
                response_deserializer=osinfo__pb2.ProcessInfo.FromString,
                )


class OSInfoProviderServicer(object):
    """Interface of the service (implemented by server)
    """

    def GetOSInfo(self, request, context):
        """Get holistic info about OS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProcessInfo(self, request_iterator, context):
        """Get info about a specific set (array) of processes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OSInfoProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOSInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOSInfo,
                    request_deserializer=osinfo__pb2.OSQuery.FromString,
                    response_serializer=osinfo__pb2.OSInfo.SerializeToString,
            ),
            'ListProcessInfo': grpc.stream_stream_rpc_method_handler(
                    servicer.ListProcessInfo,
                    request_deserializer=osinfo__pb2.ProcessQuery.FromString,
                    response_serializer=osinfo__pb2.ProcessInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'osinfo.OSInfoProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OSInfoProvider(object):
    """Interface of the service (implemented by server)
    """

    @staticmethod
    def GetOSInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osinfo.OSInfoProvider/GetOSInfo',
            osinfo__pb2.OSQuery.SerializeToString,
            osinfo__pb2.OSInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProcessInfo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/osinfo.OSInfoProvider/ListProcessInfo',
            osinfo__pb2.ProcessQuery.SerializeToString,
            osinfo__pb2.ProcessInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
